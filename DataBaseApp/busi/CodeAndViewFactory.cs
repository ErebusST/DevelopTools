using DataBaseApp.busi.entity;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace DataBaseApp.busi
{
    public class CodeAndViewFactory
    {
        public static String CreateBackgroundCode(List<ZiDuanEntity> ziduNList, String exportPath, String gongNengMiaoShu
            , String chuangJianRen, string baoName, string tableName, string baoGuDingBuFen, string leiMingCheng, string keyName, string templateUrl, string nodeNumber)
        {
            string entityName = getJavaBean(tableName) + "Entity";
            string findEntityName = leiMingCheng + "FindEntity";
            string controllerName = leiMingCheng + "Controller";
            string serviceName = leiMingCheng + "Service";
            string serviceDaoName = leiMingCheng + "ServiceDao";
            string findEntityBaoName = baoGuDingBuFen + ".model.businessentity.findEntity." + baoName;
            string controllerBaoName = baoGuDingBuFen + ".controller." + baoName;
            string serviceBaoName = baoGuDingBuFen + ".service." + baoName;
            string serviceDaoBaoName = baoGuDingBuFen + ".servicedao." + baoName;
            //生成findEntity文件
            FileStream fs = File.Create(exportPath + "/" + findEntityName + ".java");
            fs.Close();
            StreamWriter sw = new StreamWriter(exportPath + "/" + findEntityName + ".java");
            sw.WriteLine("package " + findEntityBaoName + ";");
            sw.WriteLine("import com.swhl.model.businessentity.findentity.basefindentity.BaseFindEntity;");
            sw.WriteLine("import java.util.List;");
            sw.WriteLine("/** ");
            sw.WriteLine("*功能简介： " + gongNengMiaoShu);
            sw.WriteLine("*创建作者：" + chuangJianRen);
            sw.WriteLine("*创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("*/ ");
            sw.WriteLine("public class " + findEntityName + " extends BaseFindEntity ");
            sw.WriteLine("{");
            sw.WriteLine("    private List<Long> keyList;");
            sw.WriteLine("");
            sw.WriteLine("    public List<Long> getKeyList() {");
            sw.WriteLine("        return keyList;");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    public void setKeyList(List<Long> keyList) {");
            sw.WriteLine("        this.keyList = keyList;");
            sw.WriteLine("    }");
            sw.WriteLine("}");
            sw.Flush();
            sw.Close();
            //生成dao文件
            fs = File.Create(exportPath + "/" + serviceDaoName + ".java");
            fs.Close();
            sw = new StreamWriter(exportPath + "/" + serviceDaoName + ".java");
            sw.WriteLine("package " + serviceDaoBaoName + ";");
            sw.WriteLine("import com.swhl.model.businessentity.findentity.basefindentity.BaseFindEntity;");
            sw.WriteLine("import com.swhl.servicedao.basedao.BaseDBDao;");
            sw.WriteLine("import com.swhl.model.enumeration.publicenum.OrderTypeEnum;");
            sw.WriteLine("import com.swhl.tools.Pager;");
            sw.WriteLine("import com.ndm.model.businessentity.findEntity.background." + findEntityName + ";");
            sw.WriteLine("import org.springframework.stereotype.Repository;");
            sw.WriteLine("import java.util.HashMap;");
            sw.WriteLine("import java.util.Map;");
            sw.WriteLine("/** ");
            sw.WriteLine("*功能简介： " + gongNengMiaoShu);
            sw.WriteLine("*创建作者：" + chuangJianRen);
            sw.WriteLine("*创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("*/ ");
            sw.WriteLine("@Repository ");
            sw.WriteLine("public class " + serviceDaoName + " extends BaseDBDao ");
            sw.WriteLine("{");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： " + gongNengMiaoShu + "查询");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param findEntity the find entity");
            sw.WriteLine("     * @return the pager list");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    public Pager get" + leiMingCheng + "PagerList(" + findEntityName + " findEntity) throws Exception");
            sw.WriteLine("    {");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            StringBuilder sbSql = new StringBuilder();");
            sw.WriteLine("            sbSql.append(\" SELECT * \");");
            sw.WriteLine("            sbSql.append(\" FROM " + tableName + " \");");
            sw.WriteLine("            sbSql.append(\" WHERE 1 = 1 \");");
            foreach (ZiDuanEntity entity in ziduNList)
            {
                sw.WriteLine("            sbSql.append(\"       AND ifnull(" + entity.ziDuan + ", '') LIKE :" + entity.ziDuan + " \");  ");
            }
            sw.WriteLine("           // sbSql.append(this.getSortStr(findEntity, \"createTime\", OrderTypeEnum.DESC));");
            sw.WriteLine("            Map<String, Object> parameters = new HashMap();");
            foreach (ZiDuanEntity entity in ziduNList)
            {
                sw.WriteLine("            parameters.put(\"" + entity.ziDuan + "\", findEntity.getLikeQuery(findEntity." + getGetMethodName(entity.ziDuan) + "()));");
            }
            sw.WriteLine("            return this.findPager(sbSql.toString(), parameters, findEntity.getPageNumber(), findEntity.getPageSize());");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception ex)");
            sw.WriteLine("        {");
            sw.WriteLine("            throw ex;");
            sw.WriteLine("        }");
            sw.WriteLine("    }");
            sw.WriteLine("}");
            sw.Flush();
            sw.Close();
            //生成service文件
            fs = File.Create(exportPath + "/" + serviceName + ".java");
            fs.Close();
            sw = new StreamWriter(exportPath + "/" + serviceName + ".java");
            string shiliMingCheng = serviceDaoName.Substring(0, 1).ToLower() + serviceDaoName.Substring(1);
            sw.WriteLine("package " + serviceBaoName + ";");
            sw.WriteLine("import com.google.gson.JsonObject;");
            sw.WriteLine("import com.ndm.model.businessentity.findEntity.background.*;");
            sw.WriteLine("import com.ndm.model.dbentity.*;");
            sw.WriteLine("import " + serviceDaoBaoName + ".*;");
            sw.WriteLine("import com.swhl.service.baseservice.BaseService;");
            sw.WriteLine("import com.swhl.tools.DataSwitch;");
            sw.WriteLine("import com.swhl.tools.Pager;");
            sw.WriteLine("import org.springframework.beans.factory.annotation.Autowired;");
            sw.WriteLine("import org.springframework.stereotype.Service;");
            sw.WriteLine("import java.util.List;");
            sw.WriteLine("/** ");
            sw.WriteLine("*功能简介： " + gongNengMiaoShu);
            sw.WriteLine("*创建作者：" + chuangJianRen);
            sw.WriteLine("*创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("*/ ");
            sw.WriteLine("@Service");
            sw.WriteLine("public class " + serviceName + " extends BaseService ");
            sw.WriteLine("{");
            sw.WriteLine("    @Autowired");
            sw.WriteLine("    private " + serviceDaoName + " " + shiliMingCheng + ";");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： " + gongNengMiaoShu + "查询");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param findEntity the find entity");
            sw.WriteLine("     * @return the pager list");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    public JsonObject  get" + leiMingCheng + "PagerList(" + findEntityName + " findEntity) throws Exception");
            sw.WriteLine("    {");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            Pager pager = " + shiliMingCheng + ".get" + leiMingCheng + "PagerList(findEntity);");
            sw.WriteLine("            return DataSwitch.convertObjectToJson(pager);");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception ex)");
            sw.WriteLine("        {");
            sw.WriteLine("            throw ex;");
            sw.WriteLine("        }");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： 批量删除" + gongNengMiaoShu + "");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param keyList");
            sw.WriteLine("     * @return JsonObject");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    public JsonObject  delete" + leiMingCheng + "(List<Long> keyList) throws Exception");
            sw.WriteLine("    {");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            boolean deleteSuccess = " + shiliMingCheng + ".deleteByPrimaryKeys(" + entityName + ".class, keyList) > 0;");
            sw.WriteLine("            if (deleteSuccess) {");
            sw.WriteLine("                return getSuccessJson();");
            sw.WriteLine("            } else {");
            sw.WriteLine("                return getFailedJson();");
            sw.WriteLine("            }");
            sw.WriteLine("        } ");
            sw.WriteLine("        catch (Exception ex)");
            sw.WriteLine("        {");
            sw.WriteLine("            throw ex;");
            sw.WriteLine("        }");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： " + gongNengMiaoShu + "添加");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param entity");
            sw.WriteLine("     * @return JsonObject");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    public JsonObject insert" + leiMingCheng + "(" + entityName + " entity) throws Exception");
            sw.WriteLine("    {");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            if (" + shiliMingCheng + ".insertOne(entity))");
            sw.WriteLine("            {");
            sw.WriteLine("                return getSuccessJson();");
            sw.WriteLine("            }");
            sw.WriteLine("            else");
            sw.WriteLine("            {");
            sw.WriteLine("                return getFailedJson();");
            sw.WriteLine("            }");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception ex)");
            sw.WriteLine("        {");
            sw.WriteLine("            throw ex;");
            sw.WriteLine("        }");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： " + gongNengMiaoShu + "编辑");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param entity");
            sw.WriteLine("     * @return JsonObject");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    public JsonObject update" + leiMingCheng + "(" + entityName + " entity) throws Exception");
            sw.WriteLine("    {");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            if (" + shiliMingCheng + ".updateEntity(entity) > 0 ? true : false)");
            sw.WriteLine("            {");
            sw.WriteLine("                return getSuccessJson();");
            sw.WriteLine("            }");
            sw.WriteLine("            else");
            sw.WriteLine("            {");
            sw.WriteLine("                return getFailedJson();");
            sw.WriteLine("            }");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception ex)");
            sw.WriteLine("        {");
            sw.WriteLine("            throw ex;");
            sw.WriteLine("        }");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： 获得" + gongNengMiaoShu + "详细信息");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param id");
            sw.WriteLine("     * @return JsonObject");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    public JsonObject get" + leiMingCheng + "Detail(Long id)");
            sw.WriteLine("    {");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            return getSuccessJson(DataSwitch.convertObjectToJson(" + shiliMingCheng + ".findById(" + entityName + ".class, id)));");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception ex)");
            sw.WriteLine("        {");
            sw.WriteLine("            throw ex;");
            sw.WriteLine("        }");
            sw.WriteLine("    }");
            sw.WriteLine("}");
            sw.Flush();
            sw.Close();
            //生成controller文件
            fs = File.Create(exportPath + "/" + controllerName + ".java");
            fs.Close();
            sw = new StreamWriter(exportPath + "/" + controllerName + ".java");
            shiliMingCheng = serviceName.Substring(0, 1).ToLower() + serviceName.Substring(1);
            sw.WriteLine("package " + controllerBaoName + ";");
            sw.WriteLine("import com.google.gson.JsonObject;");
            sw.WriteLine("import com.ndm.model.businessentity.findEntity.background.*;");
            sw.WriteLine("import com.ndm.model.dbentity.*;");
            sw.WriteLine("import " + serviceBaoName + ".*;");
            sw.WriteLine("import com.swhl.controller.util.BaseApiController;");
            sw.WriteLine("import com.swhl.model.enumeration.publicenum.ApiConfigEnum;");
            sw.WriteLine("import com.swhl.tools.ObjectUtils;");
            sw.WriteLine("import org.springframework.beans.factory.annotation.Autowired;");
            sw.WriteLine("import com.swhl.auth.Auth;");
            sw.WriteLine("import org.springframework.web.bind.annotation.*;");
            sw.WriteLine("/** ");
            sw.WriteLine("*功能简介： " + gongNengMiaoShu);
            sw.WriteLine("*创建作者：" + chuangJianRen);
            sw.WriteLine("*创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("*/ ");
            sw.WriteLine("@Auth(\"\")");
            sw.WriteLine("@RestController");
            sw.WriteLine("@RequestMapping(\"/\"+ApiConfigEnum.version+\"/" + leiMingCheng.Substring(0, 1).ToLower() + leiMingCheng.Substring(1) + "\")");
            sw.WriteLine("public class " + controllerName + " extends BaseApiController");
            sw.WriteLine("{");
            sw.WriteLine("    @Autowired");
            sw.WriteLine("    private " + serviceName + " " + shiliMingCheng + ";");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： " + gongNengMiaoShu + "查询");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param findEntity the find entity");
            sw.WriteLine("     * @return the pager list");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    @ResponseBody");
            sw.WriteLine("    @RequestMapping(value = \"/get" + leiMingCheng + "PagerList\", method = RequestMethod.POST)");
            sw.WriteLine("    public JsonObject get" + leiMingCheng + "PagerList(@RequestBody " + findEntityName + " findEntity)");
            sw.WriteLine("    {");
            sw.WriteLine("        JsonObject jsonObject;");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            Integer pageSize = findEntity.getPageSize();");
            sw.WriteLine("            Integer pageNumber = findEntity.getPageNumber();");
            sw.WriteLine("");
            sw.WriteLine("            if (ObjectUtils.isEmpty(pageSize))");
            sw.WriteLine("            {");
            sw.WriteLine("                jsonObject = this.getNotEmptyJson(\"pageSize\");");
            sw.WriteLine("            }");
            sw.WriteLine("            else if (ObjectUtils.isEmpty(pageNumber))");
            sw.WriteLine("            {");
            sw.WriteLine("                jsonObject = this.getNotEmptyJson(\"pageNumber\");");
            sw.WriteLine("            }");
            sw.WriteLine("            else");
            sw.WriteLine("            {");
            sw.WriteLine("                jsonObject = getSuccessJson(" + shiliMingCheng + ".get" + leiMingCheng + "PagerList(findEntity));");
            sw.WriteLine("            }");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception e)");
            sw.WriteLine("        {");
            sw.WriteLine("            jsonObject = getFailedJson(e, this.getClass(), \"" + gongNengMiaoShu + "查询失败\", findEntity);");
            sw.WriteLine("        }");
            sw.WriteLine("        return jsonObject;");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： 批量删除" + gongNengMiaoShu);
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param findEntity");
            sw.WriteLine("     * @return the pager list");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    @ResponseBody");
            sw.WriteLine("    @RequestMapping(value = \"/delete" + leiMingCheng + "\", method = RequestMethod.POST)");
            sw.WriteLine("    public JsonObject delete" + leiMingCheng + "(@RequestBody " + findEntityName + " findEntity)");
            sw.WriteLine("    {");
            sw.WriteLine("        JsonObject jsonObject;");
            sw.WriteLine("        try {");
            sw.WriteLine("            if (ObjectUtils.isEmpty(findEntity.getKeyList())) {");
            sw.WriteLine("                jsonObject = this.getNotEmptyJson(\"keyList\");");
            sw.WriteLine("            } else {");
            sw.WriteLine("                jsonObject = " + shiliMingCheng + ".delete" + leiMingCheng + "(findEntity.getKeyList());");
            sw.WriteLine("                  }");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception e)");
            sw.WriteLine("        {");
            sw.WriteLine("            jsonObject = getFailedJson(e, this.getClass(), \"批量删除" + gongNengMiaoShu + "失败\", findEntity);");
            sw.WriteLine("        }");
            sw.WriteLine("        return jsonObject;");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： " + gongNengMiaoShu + "新增");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param entity the find entity");
            sw.WriteLine("     * @return the pager list");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    @ResponseBody");
            sw.WriteLine("    @RequestMapping(value = \"/insert" + leiMingCheng + "\", method = RequestMethod.POST)");
            sw.WriteLine("    public JsonObject insert" + leiMingCheng + "(@RequestBody " + entityName + " entity)");
            sw.WriteLine("    {");
            sw.WriteLine("        JsonObject jsonObject;");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            jsonObject = " + shiliMingCheng + ".insert" + leiMingCheng + "(entity);");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception e)");
            sw.WriteLine("        {");
            sw.WriteLine("            jsonObject = getFailedJson(e, this.getClass(), \" " + gongNengMiaoShu + "新增失败\", entity);");
            sw.WriteLine("        }");
            sw.WriteLine("        return jsonObject;");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： " + gongNengMiaoShu + "更新");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param entity ");
            sw.WriteLine("     * @return the pager list");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    @ResponseBody");
            sw.WriteLine("    @RequestMapping(value = \"/update" + leiMingCheng + "\", method = RequestMethod.POST)");
            sw.WriteLine("    public JsonObject update" + leiMingCheng + "(@RequestBody " + entityName + " entity)");
            sw.WriteLine("    {");
            sw.WriteLine("        JsonObject jsonObject;");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            jsonObject = " + shiliMingCheng + ".update" + leiMingCheng + "(entity);");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception e)");
            sw.WriteLine("        {");
            sw.WriteLine("            jsonObject = getFailedJson(e, this.getClass(), \" " + gongNengMiaoShu + "更新失败\", entity);");
            sw.WriteLine("        }");
            sw.WriteLine("        return jsonObject;");
            sw.WriteLine("    }");
            sw.WriteLine("");
            sw.WriteLine("    /** ");
            sw.WriteLine("     *功能简介： 获得" + gongNengMiaoShu + "详细信息");
            sw.WriteLine("     *创建作者：" + chuangJianRen);
            sw.WriteLine("     *创建时间： " + DateTime.Now.ToString());
            sw.WriteLine("     * @param entity");
            sw.WriteLine("     * @return the pager list");
            sw.WriteLine("     * @throws Exception the exception");
            sw.WriteLine("*/ ");
            sw.WriteLine("    @ResponseBody");
            sw.WriteLine("    @RequestMapping(value = \"/get" + leiMingCheng + "Detail\", method = RequestMethod.POST)");
            sw.WriteLine("    public JsonObject get" + leiMingCheng + "Detail(@RequestBody " + entityName + " entity)");
            sw.WriteLine("    {");
            sw.WriteLine("        JsonObject jsonObject;");
            sw.WriteLine("        try");
            sw.WriteLine("        {");
            sw.WriteLine("            Long " + keyName + " = entity." + getGetMethodName(keyName) + "();");
            sw.WriteLine("");
            sw.WriteLine("            if (ObjectUtils.isEmpty(" + keyName + "))");
            sw.WriteLine("            {");
            sw.WriteLine("                jsonObject = this.getNotEmptyJson(\"" + keyName + "\");");
            sw.WriteLine("            }");
            sw.WriteLine("            else");
            sw.WriteLine("            {");
            sw.WriteLine("                jsonObject = " + shiliMingCheng + ".get" + leiMingCheng + "Detail(" + keyName + ");");
            sw.WriteLine("            }");
            sw.WriteLine("        }");
            sw.WriteLine("        catch (Exception e)");
            sw.WriteLine("        {");
            sw.WriteLine("            jsonObject = getFailedJson(e, this.getClass(), \" 获得" + gongNengMiaoShu + "详细信息失败\", entity);");
            sw.WriteLine("        }");
            sw.WriteLine("        return jsonObject;");
            sw.WriteLine("    }");
            sw.WriteLine("  }");
            sw.Flush();
            sw.Close();
            string webPageMingCheng = leiMingCheng.Substring(0, 1).ToLower() + leiMingCheng.Substring(1);
            //前台List页面html
            fs = File.Create(exportPath + "/" + webPageMingCheng + "List.html");
            fs.Close();
            sw = new StreamWriter(exportPath + "/" + webPageMingCheng + "List.html");
            sw.WriteLine("<div class='contentPanel' out-to='app' id='div_contentPanel' ng-init='initPage()'>");
            sw.WriteLine("    <!--面包屑-->");
            sw.WriteLine("    <div class='page-header'>");
            sw.WriteLine("        <span ng-bind='navTitle'></span>");
            sw.WriteLine("    </div>");
            sw.WriteLine("    <ul class='nav nav-tabs'>");
            sw.WriteLine("        <li ng-click='tab_OnClick(\"0\")'");
            sw.WriteLine("            ng-class='{active:(findEntity.areaId==\"0\")}'>");
            sw.WriteLine("            <a href='JavaScript:;' style='color: #666;'>");
            sw.WriteLine("                全部");
            sw.WriteLine("            </a>");
            sw.WriteLine("        </li>");
            sw.WriteLine("    </ul>");
            sw.WriteLine("    <div class='data_panel clearfix' id='table_adminListPanel'>");
            sw.WriteLine("        <!--查询条件-->");
            sw.WriteLine("        <div class='div_search'>");
            sw.WriteLine("            <ul>");
            sw.WriteLine("                <li>");
            sw.WriteLine("                    <div class='searchText'>查询条件：</div>");
            sw.WriteLine("                    <div class='selector_normal'>");
            sw.WriteLine("                        <input ng-model='findEntity.searchContent' class='form-control search_input' type='text'");
            sw.WriteLine("                                placeholder='查询条件' search-keyup callback='btn_Search_OnClick()'/>");
            sw.WriteLine("                    </div>");
            sw.WriteLine("                </li>");
            sw.WriteLine("                <li>");
            sw.WriteLine("                    <div class='searchText'>下拉框：</div>");
            sw.WriteLine("                    <div class='selector_normal'>");
            sw.WriteLine("                        <div ng-model='findEntity.webShow' super-select contain-all='true'");
            sw.WriteLine("                             style='width: 90px; ' placeholder='前端显示' data='webShowList'");
            sw.WriteLine("                             display-member='value' value-member='id' is-search='false'></div>");
            sw.WriteLine("                    </div>");
            sw.WriteLine("                </li>");
            sw.WriteLine("                <li>");
            sw.WriteLine("                   <div class='searchText'>时间：</div>");
            sw.WriteLine("                    <div class='selector_normal'>");
            sw.WriteLine("                        <input class='form-control input-sm search_input mydatepicker' type='text'");
            sw.WriteLine("                               style='width: 100px;'");
            sw.WriteLine("                               ng-model='findEntity.pageBeginTime'");
            sw.WriteLine("                               my-datepicker");
            sw.WriteLine("                               readonly");
            sw.WriteLine("                               date-format='yyyy-MM-dd'");
            sw.WriteLine("                               min-date='minDate'");
            sw.WriteLine("                               max-date='maxDate'/>");
            sw.WriteLine("                        - <input class='form-control input-sm search_input mydatepicker' type='text'");
            sw.WriteLine("                               style='width: 100px;'");
            sw.WriteLine("                               ng-model='findEntity.pageBeginTime'");
            sw.WriteLine("                               my-datepicker");
            sw.WriteLine("                               readonly");
            sw.WriteLine("                               date-format='yyyy-MM-dd'");
            sw.WriteLine("                               min-date='minDate'");
            sw.WriteLine("                               max-date='maxDate'/>");
            sw.WriteLine("                    </div>");
            sw.WriteLine("                </li>");
            sw.WriteLine("                <li>");
            sw.WriteLine("                    <button type='button' class='btn btn-default' ng-click='btn_Search_OnClick(1);'>");
            sw.WriteLine("                        搜索");
            sw.WriteLine("                    </button>");
            sw.WriteLine("                </li>");
            sw.WriteLine("            </ul>");
            sw.WriteLine("        </div>");
            sw.WriteLine("        <div class='clear'></div>");
            sw.WriteLine("        <div class='div_btn_panel'>");
            sw.WriteLine("            <button type='button' class='btn btn-default2 btn-search' ng-click='btn_add_OnClick()'>");
            sw.WriteLine("                <span class='glyphicon glyphicon-plus'></span>添加");
            sw.WriteLine("            </button>");
            sw.WriteLine("            <button type='button' class='btn btn-search' ng-click='btn_edit_OnClick()'>");
            sw.WriteLine("                <span class='glyphicon glyphicon-pencil'></span>修改");
            sw.WriteLine("            </button>");
            sw.WriteLine("            <button type='button' class='btn btn-search' ng-click='btn_delete_OnClick()'>");
            sw.WriteLine("                <span class='glyphicon glyphicon-trash'></span>删除");
            sw.WriteLine("            </button>");
            sw.WriteLine("        </div>");
            sw.WriteLine("        <div class='clear'></div>");
            sw.WriteLine("        <!--数据列表-->");
            sw.WriteLine("        <div class='div_table'>");
            sw.WriteLine("            <table id='table_List' class='table table-bordered table-hover table_grid table-fixed'");
            sw.WriteLine("                   width='100%' ng-keydown='isKeyPressed($event,\"table_List\")' ng-keyup='isKeyPressed($event,\"table_List\")'");
            sw.WriteLine("                   tabindex='-1'>");
            sw.WriteLine("                <thead>");
            sw.WriteLine("                <tr>");
            sw.WriteLine("                    <th style='width:30px;padding-left:10px !important' class='textCenter'>");
            sw.WriteLine("                        <input type='checkbox' ng-model='chkall' ng-click='chkAll(selectItems,pageData,chkall)'");
            sw.WriteLine("                               ng-checked='selectItems.length != 0'/>");
            sw.WriteLine("                    </th>");
            sw.WriteLine("                    <th style='width: 50px; text-align: center;'>");
            sw.WriteLine("                        序号");
            sw.WriteLine("                    </th>");
            foreach (ZiDuanEntity entity in ziduNList)
            {
                sw.WriteLine("                    <th style='width: 80px;' >");
                sw.WriteLine("                        <div>" + entity.zhongWenMiaoShu + "</div>");
                sw.WriteLine("                    </th>");
            }
            sw.WriteLine("                </tr>");
            sw.WriteLine("                </thead>");
            sw.WriteLine("                <tbody ng-if='!isNoData'>");
            sw.WriteLine("                <tr ng-repeat='listItem in pageData.rows track by $index'");
            sw.WriteLine("                    ng-class='{active:listItem.checked}'");
            sw.WriteLine("                    ng-click='girdRowOnClick(selectItems, pageData,$event,$index);'>");
            sw.WriteLine("                    <td style='padding-left:10px !important' class='textCenter'>");
            sw.WriteLine("                        <input type='checkbox' ng-model='listItem.checked'/>");
            sw.WriteLine("                    </td>");
            sw.WriteLine("                    <td ng-bind='((pageData.pageNumber-1) * pageData.pageSize)+1+$index' style='text-align:center;'></td>");
            foreach (ZiDuanEntity entity in ziduNList)
            {
                sw.WriteLine("                    <td ng-bind='listItem." + entity.ziDuan + "'></td>");
            }
            sw.WriteLine("                </tr>");
            sw.WriteLine("                </tbody>");
            sw.WriteLine("            </table>");
            sw.WriteLine("            <div class='table-nodata' error-type='isNoData'></div>");
            sw.WriteLine("        </div>");
            sw.WriteLine("        <div class='clear'></div>");
            sw.WriteLine("    </div>");
            sw.WriteLine("</div>");
            sw.WriteLine("<!--分页-->");
            sw.WriteLine("<div ng-hide='isNoData' class='fadeInBottom'");
            sw.WriteLine("     ng-class='{fix_bottom_full:isViewFull,fix_bottom_mini:!isViewFull}'>");
            sw.WriteLine("    <div class='pager-grid' page-size='findEntity.pageSize'");
            sw.WriteLine("         grid-data='pageData'");
            sw.WriteLine("         side='left'");
            sw.WriteLine("         callback='btn_Search_OnClick(arg1)'></div>");
            sw.WriteLine("    <div class='clear'></div>");
            sw.WriteLine("</div>");
            sw.Flush();
            sw.Close();
            //前台List页面js
            fs = File.Create(exportPath + "/" + webPageMingCheng + "ListController.js");
            fs.Close();
            sw = new StreamWriter(exportPath + "/" + webPageMingCheng + "ListController.js");
            string webCtrName = webPageMingCheng + "ListCtr";
            string apiQianZhui = leiMingCheng.Substring(0, 1).ToLower() + leiMingCheng.Substring(1);
            sw.WriteLine("/*");
            sw.WriteLine(" ** 创建人：" + chuangJianRen);
            sw.WriteLine(" ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine(" */");
            sw.WriteLine("define(['mcApp'], function (mcApp) {");
            sw.WriteLine("    //解析路由");
            sw.WriteLine("    mcApp.config(");
            sw.WriteLine("        ['$stateProvider',");
            sw.WriteLine("            function ($stateProvider) {");
            sw.WriteLine("                $stateProvider.state('" + templateUrl + "/" + webPageMingCheng + "List',");
            sw.WriteLine("                    {");
            sw.WriteLine("                        url: '/" + webPageMingCheng + "List',");
            sw.WriteLine("                        views: {");
            sw.WriteLine("                            'frameRightView': {");
            sw.WriteLine("                                templateUrl: mcApp." + templateUrl + "+'" + webPageMingCheng + "List.html',");
            sw.WriteLine("                                controller: '" + webCtrName + "'");
            sw.WriteLine("                            }");
            sw.WriteLine("                        }");
            sw.WriteLine("                    });");
            sw.WriteLine("            }]);");
            sw.WriteLine("    mcApp.controller('" + webCtrName + "', " + webCtrName + ");");
            sw.WriteLine("    " + webCtrName + ".$inject = ['$rootScope', '$scope', '$state', 'ajaxService', 'toolService', 'pageFactory', 'loadFactory'];");
            sw.WriteLine("    function " + webCtrName + "($rootScope, $scope, $state, ajaxService, toolService, pageFactory, loadFactory)");
            sw.WriteLine("    {");
            sw.WriteLine("        var nodeNumber = '" + nodeNumber + "';");
            sw.WriteLine("        $scope.navTitle = toolService.setActiveTree(nodeNumber);");
            sw.WriteLine("");
            sw.WriteLine("        //浏览列表需要的选中变量");
            sw.WriteLine("        $scope.selectItems = [];");
            sw.WriteLine("        $scope.selectItemsStr = '';");
            sw.WriteLine("");
            sw.WriteLine("        //查询实体");
            sw.WriteLine("        $scope.findEntity = {");
            sw.WriteLine("            pageNumber: 1,");
            sw.WriteLine("            pageSize: $rootScope.pageSize,");
            sw.WriteLine("            pageBeginTime: toolService.getDate('yyyy-MM-dd', -30),");
            sw.WriteLine("            pageBeginTime: toolService.getDate('yyyy-MM-dd'),");
            sw.WriteLine("            searchContent:'',");
            sw.WriteLine("            state:'',");
            sw.WriteLine("            orderBy:'',");
            sw.WriteLine("            selectId: 0");
            sw.WriteLine("        };");
            sw.WriteLine("");
            sw.WriteLine("        /*");
            sw.WriteLine("         ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：初始化页面方法");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.initPage = function () {");
            sw.WriteLine("            //编辑页返回后回复上次查询实体的值");
            sw.WriteLine("            $scope.findEntity = toolService.loadFindEntity($scope.findEntity, nodeNumber);");
            sw.WriteLine("            $scope.btn_Search_OnClick($scope.findEntity.pageNumber);");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：查询方法");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.btn_Search_OnClick = function (pageNumber) {");
            sw.WriteLine("            if (pageNumber === undefined)");
            sw.WriteLine("            {");
            sw.WriteLine("                pageNumber = 1;");
            sw.WriteLine("            }");
            sw.WriteLine("            toolService.gridFilterLoading.open('div_table');");
            sw.WriteLine("            $scope.findEntity.pageNumber = pageNumber;");
            sw.WriteLine("            $scope.findEntity.createTimeBeginTime = $scope.findEntity.createBeginTime + ' 00:00:00';");
            sw.WriteLine("            $scope.findEntity.createTimeEndTime = $scope.findEntity.createEndTime + ' 23:59:59';");
            sw.WriteLine("            var ajaxUrl = options.api.base_url + '/" + apiQianZhui + "/get" + leiMingCheng + "PagerList';");
            sw.WriteLine("            var ajaxConfig = {");
            sw.WriteLine("                data: $scope.findEntity,");
            sw.WriteLine("                url: ajaxUrl,");
            sw.WriteLine("            };");
            sw.WriteLine("            var promise = ajaxService.getDeferData(ajaxConfig);");
            sw.WriteLine("            promise.then(function (responseData) {");
            sw.WriteLine("                    if (responseData.result == 'success')");
            sw.WriteLine("                    {");
            sw.WriteLine("                        if (responseData.data.total > 0)");
            sw.WriteLine("                        {");
            sw.WriteLine("                            $scope.isNoData = '';");
            sw.WriteLine("                            $scope.pageData = responseData.data;");
            sw.WriteLine("                            angular.forEach($scope.pageData.rows, function (oneItem) {");
            sw.WriteLine("                                if (oneItem." + keyName + " === $scope.findEntity.selectId)");
            sw.WriteLine("                                {");
            sw.WriteLine("                                    oneItem.checked = true;");
            sw.WriteLine("                                    $scope.selectItems.push(oneItem);");
            sw.WriteLine("                                    $scope.selectItemsStr = oneItem;");
            sw.WriteLine("                                }");
            sw.WriteLine("                            });");
            sw.WriteLine("                        }");
            sw.WriteLine("                        else");
            sw.WriteLine("                        {");
            sw.WriteLine("                            //无数据异常");
            sw.WriteLine("                            $scope.isNoData = 'nodata';");
            sw.WriteLine("                        }");
            sw.WriteLine("                    }");
            sw.WriteLine("                    else if (responseData.result == 'fail')");
            sw.WriteLine("                    {");
            sw.WriteLine("                        $scope.isNoData = 'syserror';");
            sw.WriteLine("                    }");
            sw.WriteLine("                    toolService.gridFilterLoading.close('div_table');");
            sw.WriteLine("                    toolService.pageLoading.close();");
            sw.WriteLine("                },");
            sw.WriteLine("                function (errorMesg) {");
            sw.WriteLine("                    toolService.log('获取信息失败！' + errorMesg);");
            sw.WriteLine("                    $scope.isNoData = 'syserror';");
            sw.WriteLine("                    toolService.gridFilterLoading.close('div_table');");
            sw.WriteLine("                });");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：页签点击事件");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.tab_OnClick = function (flag) {");
            sw.WriteLine("            $scope.findEntity.state = flag;");
            sw.WriteLine("            $scope.btn_Search_OnClick(1);");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：赵亮");
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：排序点击事件");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.setOrderBy = function (orderStr) {");
            sw.WriteLine("            if (orderStr)");
            sw.WriteLine("            {");
            sw.WriteLine("                $scope.findEntity.orderBy = orderStr;");
            sw.WriteLine("                $scope.btn_Search_OnClick($scope.findEntity.pageNumber);");
            sw.WriteLine("            }");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：验证是否选择了数据");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.validateIsCheck = function () {");
            sw.WriteLine("            if ($scope.selectItems.length == 0)");
            sw.WriteLine("            {");
            sw.WriteLine("                toolService.popMessageWindow('请至少选择一条数据！');");
            sw.WriteLine("                return false;");
            sw.WriteLine("            }");
            sw.WriteLine("            if ($scope.selectItems.length > 1)");
            sw.WriteLine("            {");
            sw.WriteLine("                toolService.popMessageWindow('一次只能对一条数据进行操作！');");
            sw.WriteLine("                return false;");
            sw.WriteLine("            }");
            sw.WriteLine("            return true;");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：删除按钮事件");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.btn_delete_OnClick = function () {");
            sw.WriteLine("            if ($scope.selectItems.length == 0)");
            sw.WriteLine("            {");
            sw.WriteLine("                 toolService.popMessageWindow('请至少选择一条数据！');");
            sw.WriteLine("                 return false;");
            sw.WriteLine("            }");
            sw.WriteLine("            var promise = toolService.popConfirm('是否执行删除操作？', '订单删除');");
            sw.WriteLine("            promise.then(function () {");
            sw.WriteLine("                toolService.pageLoading.open('正在删除...');");
            sw.WriteLine("                var keyIds = [];");
            sw.WriteLine("                for (var i = 0; i < $scope.selectItems.length; i++)");
            sw.WriteLine("                {");
            sw.WriteLine("                    keyIds.push($scope.selectItems[i]." + keyName + ");");
            sw.WriteLine("                }");
            sw.WriteLine("                var ajaxUrl = options.api.base_url + '/" + apiQianZhui + "/delete" + leiMingCheng + "';");
            sw.WriteLine("                var ajaxConfig = {");
            sw.WriteLine("                    data: {keyList: keyIds},");
            sw.WriteLine("                    url: ajaxUrl,");
            sw.WriteLine("                };");
            sw.WriteLine("                var promise = ajaxService.getDeferData(ajaxConfig);");
            sw.WriteLine("                promise.then(function (responseData) {");
            sw.WriteLine("                       if (responseData.result == 'success')");
            sw.WriteLine("                        {");
            sw.WriteLine("                            toolService.popTips('删除成功！');");
            sw.WriteLine("                            $scope.findEntity.selectId = 0;");
            sw.WriteLine("                            $scope.btn_Search_OnClick($scope.findEntity.pageNumber);");
            sw.WriteLine("                        }");
            sw.WriteLine("                        else");
            sw.WriteLine("                        {");
            sw.WriteLine("                            toolService.popTips('删除失败！');");
            sw.WriteLine("                        }");
            sw.WriteLine("                            toolService.pageLoading.close();");
            sw.WriteLine("                },");
            sw.WriteLine("                    function (errorMesg) {");
            sw.WriteLine("                        toolService.printError('操作失败！' + errorMesg);");
            sw.WriteLine("                        toolService.pageLoading.close();");
            sw.WriteLine("                    });");
            sw.WriteLine("            });");
            sw.WriteLine("        }");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：点击修改按钮事件");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.btn_edit_OnClick = function () {");
            sw.WriteLine("            if($scope.validateIsCheck()==false)");
            sw.WriteLine("            {");
            sw.WriteLine("                return;");
            sw.WriteLine("            }");
            sw.WriteLine("            pageFactory.set({" + keyName + ":$scope.selectItems[0]." + keyName + "});");
            sw.WriteLine("            loadFactory.set($scope.findEntity);");
            sw.WriteLine("            $state.go('" + templateUrl + "/" + webPageMingCheng + "Add');");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：点击名称修改");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.btn_item_OnClick = function (listItem) {");
            sw.WriteLine("            pageFactory.set(listItem." + keyName + ");");
            sw.WriteLine("            loadFactory.set($scope.findEntity);");
            sw.WriteLine("            $state.go('" + templateUrl + "/" + webPageMingCheng + "Add');");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：点击添加按钮事件");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.btn_add_OnClick = function () {");
            sw.WriteLine("            pageFactory.set({" + keyName + ":0});");
            sw.WriteLine("            loadFactory.set($scope.findEntity);");
            sw.WriteLine("            $state.go('" + templateUrl + "/" + webPageMingCheng + "Add');");
            sw.WriteLine("        };");
            sw.WriteLine("    };");
            sw.WriteLine("});");
            sw.Flush();
            sw.Close();
            //前台Edit页面html
            fs = File.Create(exportPath + "/" + leiMingCheng.Substring(0, 1).ToLower() + leiMingCheng.Substring(1) + "Add.html");
            fs.Close();
            sw = new StreamWriter(exportPath + "/" + leiMingCheng.Substring(0, 1).ToLower() + leiMingCheng.Substring(1) + "Add.html");
            sw.WriteLine("<div class='contentPanel fadeInNothing' out-to='app' id='div_contentPanel' ng-init='initPage()'>");
            sw.WriteLine("    <!--面包屑-->");
            sw.WriteLine("    <div class='page-header'>");
            sw.WriteLine("        <span>{{ navTitle }}&nbsp;/&nbsp;{{pageType}}</span>");
            sw.WriteLine("        <span class='link_back'>");
            sw.WriteLine("            <a href='JavaScript:;' style='width: 140px;' ng-click='link_back_OnClick()'>");
            sw.WriteLine("                <span class='glyphicon glyphicon-menu-left'></span>返回");
            sw.WriteLine("            </a>");
            sw.WriteLine("        </span>");
            sw.WriteLine("    </div>");
            sw.WriteLine("    <!--内容-->");
            sw.WriteLine("    <div class='form_body my-form-validate' my-form-is-valid='myFormIsValid' my-form-auto-check='myFormAutoCheck1' side-type = 'right' > ");
            sw.WriteLine("        <div class='body_content clearfix'>");
            sw.WriteLine("            <ul class='one-model'>");
            foreach (ZiDuanEntity entity in ziduNList)
            {
                sw.WriteLine("                <li>");
                sw.WriteLine("                    <div class='one-title'><span class='required'>*</span>" + entity.zhongWenMiaoShu + "：</div>");
                sw.WriteLine("                    <div class='one-control w50p'>");
                sw.WriteLine("                        <input placeholder='请填写" + entity.zhongWenMiaoShu + "' class='form-control'");
                sw.WriteLine("                               my-validate='required'");
                sw.WriteLine("                               my-validate-err='不能为空' type='text' ng-model='entity." + entity.ziDuan + "'>");
                sw.WriteLine("                    </div>");
                sw.WriteLine("                </li>");
            }
            sw.WriteLine("            </ul>");
            sw.WriteLine("        </div>");
            sw.WriteLine("        <div class='clear'></div>");
            sw.WriteLine("        <div class='body_foot pos_relative'>");
            sw.WriteLine("            <!--foot_center-->");
            sw.WriteLine("            <button type='button' class='btn btn-success ' tabindex='-1'  ng-disabled='!myFormIsValid'");
            sw.WriteLine("                    ng-click='btn_save_OnClick()' ng-bind='infoText'>");
            sw.WriteLine("            </button>");
            sw.WriteLine("        </div>");
            sw.WriteLine("    </div>");
            sw.WriteLine("</div>");
            sw.Flush();
            sw.Close();
            //前台Edit页面js
            string webAddCtr = webPageMingCheng + "AddCtr";
            fs = File.Create(exportPath + "/" + leiMingCheng.Substring(0, 1).ToLower() + leiMingCheng.Substring(1) + "AddController.js");
            fs.Close();
            sw = new StreamWriter(exportPath + "/" + leiMingCheng.Substring(0, 1).ToLower() + leiMingCheng.Substring(1) + "AddController.js");
            sw.WriteLine("/*");
            sw.WriteLine(" ** 创建人：" + chuangJianRen);
            sw.WriteLine(" ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine(" */");
            sw.WriteLine("define(['mcApp'], function (mcApp) {");
            sw.WriteLine("    //解析路由");
            sw.WriteLine("    mcApp.config(");
            sw.WriteLine("        ['$stateProvider',");
            sw.WriteLine("            function ($stateProvider) {");
            sw.WriteLine("                $stateProvider.state('" + templateUrl + "/" + webPageMingCheng + "Add',");
            sw.WriteLine("                    {");
            sw.WriteLine("                        url: '/" + webPageMingCheng + "Add',");
            sw.WriteLine("                        views: {");
            sw.WriteLine("                            'frameRightView': {");
            sw.WriteLine("                                templateUrl: mcApp." + templateUrl + "+'" + webPageMingCheng + "Add.html',");
            sw.WriteLine("                                controller: '" + webAddCtr + "'");
            sw.WriteLine("                            }");
            sw.WriteLine("                        }");
            sw.WriteLine("                    });");
            sw.WriteLine("            }]);");
            sw.WriteLine("");
            sw.WriteLine("    mcApp.controller('" + webAddCtr + "', " + webAddCtr + ");");
            sw.WriteLine("    " + webAddCtr + ".$inject = ['$rootScope', '$scope', '$state', 'ajaxService', 'toolService', 'pageFactory', 'loadFactory'];");
            sw.WriteLine("    function " + webAddCtr + "($rootScope, $scope, $state, ajaxService, toolService, pageFactory, loadFactory)");
            sw.WriteLine("    {");
            sw.WriteLine("        var nodeNumber = '" + nodeNumber + "';");
            sw.WriteLine("        $scope.navTitle = toolService.setActiveTree(nodeNumber);");
            sw.WriteLine("        $scope.infoText = '保存';");
            sw.WriteLine("        $scope.isEdit = false;");
            sw.WriteLine("        $scope.findEntity = {");
            sw.WriteLine("            " + keyName + ": 0");
            sw.WriteLine("        };");
            sw.WriteLine("        $scope.entity={};");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：初始化页面方法");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.initPage = function () {");
            sw.WriteLine("            toolService.factoryOperation(loadFactory, pageFactory, nodeNumber);");
            sw.WriteLine("            $scope.fatherEntity = pageFactory.get(true);");
            sw.WriteLine("            if ($scope.fatherEntity." + keyName + " != 0)");
            sw.WriteLine("            {");
            sw.WriteLine("                $scope.pageType = '修改';");
            sw.WriteLine("                $scope.isEdit = true;");
            sw.WriteLine("                $scope.initEditPageValues();");
            sw.WriteLine("            }");
            sw.WriteLine("            else");
            sw.WriteLine("            {");
            sw.WriteLine("                $scope.pageType = '添加';");
            sw.WriteLine("            }");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：初始化编辑页面内容");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.initEditPageValues = function () {");
            sw.WriteLine("            toolService.pageLoading.open();");
            sw.WriteLine("            var ajaxConfig = {");
            sw.WriteLine("                data: $scope.fatherEntity,");
            sw.WriteLine("                url: options.api.base_url + '/" + apiQianZhui + "/get" + leiMingCheng + "Detail',");
            sw.WriteLine("            };");
            sw.WriteLine("            var promise = ajaxService.getDeferData(ajaxConfig);");
            sw.WriteLine("            promise.then(function (responseData) {");
            sw.WriteLine("                    if (responseData.result == 'success')");
            sw.WriteLine("                    {");
            sw.WriteLine("                        $scope.entity = responseData.data;");
            sw.WriteLine("                    }");
            sw.WriteLine("                    else");
            sw.WriteLine("                    {");
            sw.WriteLine("                        toolService.popMessageWindow('获取信息失败！' + responseData.message);");
            sw.WriteLine("                    }");
            sw.WriteLine("                    //修改页面必要写法，获取完数据后自动调用验证");
            sw.WriteLine("                    $scope.myFormAutoCheck1 = Math.random();");
            sw.WriteLine("                    toolService.pageLoading.close();");
            sw.WriteLine("                },");
            sw.WriteLine("                function (errorMesg) {");
            sw.WriteLine("                    toolService.popMessageWindow('获取信息失败！' + errorMesg);");
            sw.WriteLine("                    toolService.pageLoading.close();");
            sw.WriteLine("                });");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：返回按钮点击事件");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.link_back_OnClick = function () {");
            sw.WriteLine("           $state.go('" + templateUrl + "/" + webPageMingCheng + "List');");
            sw.WriteLine("        };");
            sw.WriteLine("        /*");
            sw.WriteLine("        ** 创建作者：" + chuangJianRen);
            sw.WriteLine("        ** 创建日期：" + DateTime.Now.ToString());
            sw.WriteLine("        ** 功能简介：保存事件");
            sw.WriteLine("        */");
            sw.WriteLine("        $scope.canSubmit = true;");
            sw.WriteLine("        $scope.btn_save_OnClick = function () {");
            sw.WriteLine("            if ($scope.canSubmit == true)");
            sw.WriteLine("            {");
            sw.WriteLine("                toolService.pageLoading.open('正在保存...');");
            sw.WriteLine("                $scope.canSubmit = false;");
            sw.WriteLine("                $scope.infoText = '正在保存...';");
            sw.WriteLine("                var ajaxUrl = options.api.base_url;");
            sw.WriteLine("                if ($scope.isEdit == true)");
            sw.WriteLine("                {");
            sw.WriteLine("                    ajaxUrl += '/" + apiQianZhui + "/update" + leiMingCheng + "';");
            sw.WriteLine("                }");
            sw.WriteLine("                else");
            sw.WriteLine("                {");
            sw.WriteLine("                    ajaxUrl += '/" + apiQianZhui + "/insert" + leiMingCheng + "';");
            sw.WriteLine("                }");
            sw.WriteLine("                var ajaxConfig = {");
            sw.WriteLine("                    data: $scope.entity,");
            sw.WriteLine("                    url: ajaxUrl");
            sw.WriteLine("                };");
            sw.WriteLine("                var promise = ajaxService.getDeferData(ajaxConfig);");
            sw.WriteLine("                promise.then(function (responseData) {");
            sw.WriteLine("                        if (responseData.result == 'success')");
            sw.WriteLine("                        {");
            sw.WriteLine("                            toolService.popTips('保存成功！');");
            sw.WriteLine("                            $scope.link_back_OnClick();");
            sw.WriteLine("                        }");
            sw.WriteLine("                        else");
            sw.WriteLine("                        {");
            sw.WriteLine("                            toolService.popMessageWindow('对不起，保存失败！');");
            sw.WriteLine("                            $scope.canSubmit = true;");
            sw.WriteLine("                            $scope.infoText = '保存';");
            sw.WriteLine("                            toolService.pageLoading.close();");
            sw.WriteLine("                            toolService.popCloseAll('saved');");
            sw.WriteLine("                        }");
            sw.WriteLine("                    },");
            sw.WriteLine("                    function (errorMesg) {");
            sw.WriteLine("                        toolService.printError('保存失败！' + errorMesg);");
            sw.WriteLine("                        $scope.canSubmit = true;");
            sw.WriteLine("                        $scope.infoText = '保存';");
            sw.WriteLine("                        toolService.pageLoading.close();");
            sw.WriteLine("                    });");
            sw.WriteLine("            }");
            sw.WriteLine("        };");
            sw.WriteLine("    }");
            sw.WriteLine("});");
            sw.Flush();
            sw.Close();
            return "success";
        }
        private static String getJavaBean(String str)
        {
            String[] arr = str.Split(new String[] { "_" }, StringSplitOptions.RemoveEmptyEntries);
            StringBuilder result = new StringBuilder();
            for (int i = 0; i < arr.Length; i++)
            {
                String s = arr[i];
                //if (i == 0)
                //{
                //    result.Append(s);
                //}
                //else
                //{
                result.Append(upperFirst(s));
                //}
            }
            return result.ToString();
        }
        private static String upperFirst(String str)
        {
            String regex = "[a-z]*";
            String first = Regex.Match(str, regex).Value;
            if (first.Length == 1)
            {
                return str;
            }
            else if (str.Length == 1)
            {
                return str.ToUpper();
            }
            else if (str.Length == 0)
            {
                return str;
            }
            else
            {
                return str.Substring(0, 1).ToUpper() + str.Substring(1);
            }
        }

        private static String getGetMethodName(String field)
        {
            String str = getJavaBean(field);
            return "get" + upperFirst(str);
        }
    }


}
